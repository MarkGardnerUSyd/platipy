{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Atlas Segmentation\n",
    "\n",
    "This notebook demonstrates how to perform basic atlas-based segmentation using PlatiPy.\n",
    "\n",
    "## Import Modules\n",
    "\n",
    "The following cell imports the modules needed for this example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check if platipy is installed, if not install it.\n",
    "try:\n",
    "    import platipy\n",
    "except:\n",
    "    !pip install platipy\n",
    "    import platipy\n",
    "\n",
    "# The ImageVisualiser class\n",
    "from platipy.imaging import ImageVisualiser\n",
    "\n",
    "# Function to grab some test data\n",
    "from platipy.imaging.tests.data import get_lung_nifti\n",
    "\n",
    "# Usual suspects\n",
    "import numpy as np\n",
    "import SimpleITK as sitk\n",
    "import pandas as pd\n",
    "from pathlib import Path\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# The platipy functions we'll be using in this example\n",
    "from platipy.imaging.projects.multiatlas.run import run_segmentation, MUTLIATLAS_SETTINGS_DEFAULTS\n",
    "from platipy.imaging.registration.deformable import fast_symmetric_forces_demons_registration\n",
    "from platipy.imaging.registration.utils import apply_transform\n",
    "from platipy.imaging.registration.linear import linear_registration\n",
    "from platipy.imaging.visualisation.comparison import contour_comparison"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Download Test Data\n",
    "\n",
    "Some Lung test data from LCTSC is fetched here for use in this example notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_directory = get_lung_nifti()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Single Atlas Segmentation\n",
    "\n",
    "Here we will define one test case and one atlas case to perform single atlas segmentation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "atlas_case = \"LCTSC-Test-S1-101\"\n",
    "test_case = \"LCTSC-Test-S1-201\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read data\n",
    "\n",
    "Let's load the images and contours for our test and atlas case"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def read_image_and_contours(case_id):\n",
    "\n",
    "    pat_directory = input_directory.joinpath(case_id)\n",
    "\n",
    "    # Read in the CT image\n",
    "    ct_filename = next(pat_directory.glob(\"**/IMAGES/*.nii.gz\"))\n",
    "    ct_image = sitk.ReadImage(ct_filename.as_posix())\n",
    "\n",
    "    # Read in the RTStruct contours as binary masks\n",
    "    contour_filename_list = list(pat_directory.glob(\"**/STRUCTURES/*.nii.gz\"))\n",
    "\n",
    "    contours = {}\n",
    "    for contour_filename in contour_filename_list:\n",
    "        _name = contour_filename.name.split(\".nii.gz\")[0].split(\"RTSTRUCT_\")[-1]\n",
    "        \n",
    "        contours[_name] = sitk.ReadImage(contour_filename.as_posix())\n",
    "\n",
    "    return ct_image, contours\n",
    "\n",
    "img_ct_test, contours_test = read_image_and_contours(test_case)\n",
    "img_ct_atlas, contours_atlas = read_image_and_contours(atlas_case)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualise data\n",
    "\n",
    "Now we'll prepare some figures to view this data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "vis = ImageVisualiser(img_ct_test)\n",
    "vis.add_contour(contours_test)\n",
    "fig = vis.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "vis = ImageVisualiser(img_ct_atlas)\n",
    "vis.add_contour(contours_atlas)\n",
    "fig = vis.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear (Rigid) Registration\n",
    "\n",
    "Next we perform a linear registration, setting our test image as the fixed image and aligning our\n",
    "atlas image to it. The aligned image is the visualised by overlaying it with the test image to\n",
    "help visually inspect the quality of the registration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_ct_atlas_reg_linear, tfm_linear = linear_registration(\n",
    "    fixed_image = img_ct_test,\n",
    "    moving_image = img_ct_atlas,\n",
    "    reg_method='similarity',\n",
    "    metric='mean_squares',\n",
    "    optimiser='gradient_descent',\n",
    "    shrink_factors=[8, 4, 2],\n",
    "    smooth_sigmas=[4, 2, 0],\n",
    "    sampling_rate=1.0,\n",
    "    number_of_iterations=50,\n",
    ")\n",
    "\n",
    "vis = ImageVisualiser(img_ct_test)\n",
    "vis.add_comparison_overlay(img_ct_atlas_reg_linear)\n",
    "fig = vis.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Deformable Registration\n",
    "\n",
    "Assuming the linear registration went well, we now us deformable image registration to better align\n",
    "the atlas image to the test image. Again the resulting alignment is visualised."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "img_ct_atlas_reg_dir, tfm_dir, dvf = fast_symmetric_forces_demons_registration(\n",
    "    img_ct_test,\n",
    "    img_ct_atlas_reg_linear,\n",
    "    ncores=4,\n",
    "    isotropic_resample=True,\n",
    "    resolution_staging=[8],\n",
    "    iteration_staging=[20],\n",
    ")\n",
    "\n",
    "vis = ImageVisualiser(img_ct_test)\n",
    "vis.add_comparison_overlay(img_ct_atlas_reg_dir)\n",
    "fig = vis.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Propagate Contours\n",
    "\n",
    "Now that our images are aligned, we can combined the linear and the deformable registration and use\n",
    "this to propagate the contours from our atlas image to our test image."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tfm_combined = sitk.CompositeTransform((tfm_linear, tfm_dir))\n",
    "\n",
    "# apply to the contours\n",
    "contours_atlas_reg_dir = {}\n",
    "for s in contours_atlas:\n",
    "  contours_atlas_reg_dir[s] = apply_transform(\n",
    "      contours_atlas[s],\n",
    "      reference_image=img_ct_test,\n",
    "      transform=tfm_combined\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Contour Comparison\n",
    "\n",
    "Then we can compare our automatically generated (propagated) contours with our ground truth\n",
    "(manual) contours on our test case. To to this we use platipy's built-in `contour_comparison`\n",
    "function. This produces a visualisation was well as a pandas DataFrame with the quantitative\n",
    "metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, df_sas = contour_comparison(\n",
    "    img = img_ct_test,\n",
    "    contour_dict_a = contours_test,\n",
    "    contour_dict_b = contours_atlas_reg_dir,\n",
    "    contour_label_a = \"MANUAL\",\n",
    "    contour_label_b = \"AUTOMATIC\",\n",
    "    title='Atlas-based Segmentation',\n",
    "    subtitle='',\n",
    "    subsubtitle='',\n",
    ")\n",
    "\n",
    "df_sas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Multi-atlas Segmentation\n",
    "\n",
    "We can often improve the quality of atlas-based segmentation by using multiple atlas cases. PlatiPy\n",
    "has built-in functionality to perform multi-atlas segmentation. The following example uses 4 atlas\n",
    "cases to auto-segment our test case."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# make a copy of the default settings\n",
    "user_settings = MUTLIATLAS_SETTINGS_DEFAULTS\n",
    "\n",
    "# Define the list of structures we are segmenting\n",
    "structure_list = [\n",
    "    \"LUNG_L\",\n",
    "    \"LUNG_R\",\n",
    "    \"HEART\",\n",
    "    \"SPINALCORD\",\n",
    "    \"ESOPHAGUS\",\n",
    "]\n",
    "\n",
    "# Define the atlas set\n",
    "atlas_set = [\"101\", \"102\", \"103\", \"104\"]\n",
    "\n",
    "user_settings['atlas_settings'] = {\n",
    "    'atlas_id_list': atlas_set,\n",
    "    'atlas_structure_list': structure_list,\n",
    "    'atlas_path': './data/nifti/lung',\n",
    "    'atlas_image_format': 'LCTSC-Test-S1-{0}/IMAGES/LCTSC_TEST_S1_{0}_0_CT_0.nii.gz',\n",
    "    'atlas_label_format': 'LCTSC-Test-S1-{0}/STRUCTURES/LCTSC_TEST_S1_{0}_0_RTSTRUCT_{1}.nii.gz',\n",
    "    'crop_atlas_to_structures': True,\n",
    "    'crop_atlas_expansion_mm': 10,\n",
    "}\n",
    "\n",
    "# optionally, we can change some of the default registration parameters\n",
    "user_settings[\"linear_registration_settings\"] = {\n",
    "    \"reg_method\": \"similarity\",\n",
    "    \"shrink_factors\": [8, 4, 2],\n",
    "    \"smooth_sigmas\": [4, 2, 0],\n",
    "    \"sampling_rate\": 1,\n",
    "    \"default_value\": -1000,\n",
    "    \"number_of_iterations\": 50,\n",
    "    \"metric\": \"mean_squares\",\n",
    "    \"optimiser\": \"gradient_descent\",\n",
    "    \"verbose\": False\n",
    "}\n",
    "\n",
    "user_settings[\"deformable_registration_settings\"] = {\n",
    "    \"isotropic_resample\": True,\n",
    "    \"resolution_staging\": [8],\n",
    "    \"iteration_staging\": [20],\n",
    "    # Try commenting out the two lines above and uncommenting the following two lines for a better\n",
    "    # DIR (but slower runtime)\n",
    "    # \"resolution_staging\": [8,4,2],\n",
    "    # \"iteration_staging\": [50,50,25],\n",
    "    \"smoothing_sigmas\": [4,2,0],\n",
    "    \"ncores\": 32,\n",
    "    \"default_value\": -1000,\n",
    "    \"verbose\": False\n",
    "}\n",
    "\n",
    "# Perform the multi-atlas segmentation\n",
    "output_contours, output_probability = run_segmentation(img_ct_test, user_settings)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Contour Comparison\n",
    "\n",
    "Now let's analyse the performance of the multi-atlas segmentation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, df_mas = contour_comparison(\n",
    "    img = img_ct_test,\n",
    "    contour_dict_a = contours_test,\n",
    "    contour_dict_b = output_contours,\n",
    "    contour_label_a = \"MANUAL\",\n",
    "    contour_label_b = \"AUTOMATIC\",\n",
    "    title='Multi-Atlas Segmentation',\n",
    "    subtitle='',\n",
    "    subsubtitle='',\n",
    ")\n",
    "\n",
    "df_mas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Single-atlas vs Multi-atlas\n",
    "\n",
    "Finally, we'll compare how the two approaches performed for each of our structures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_combined = pd.merge(\n",
    "    left = df_sas,\n",
    "    right = df_mas,\n",
    "    on = \"STRUCTURE\",\n",
    "    suffixes = [\" (single)\", \" (multi)\"]\n",
    ")\n",
    "\n",
    "df_combined[[\"STRUCTURE\",\"DSC (single)\", \"DSC (multi)\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.0 ('platipy-Ut1mjAmS-py3.8')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  },
  "vscode": {
   "interpreter": {
    "hash": "950d949bcc8447743ba2e2f4f81e1f06919534c5bd1d053b1a2c5f1f73baee7b"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
